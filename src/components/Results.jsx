import {useState} from "react";export default function Results({ children }) {	return (		<section className="results">			{ children }		</section>	)}export function ResultCards({ inputVal, excludeSpaces, totalChars }) {	const [words, sentences] = calculateStats(inputVal, excludeSpaces);	return (		<section className="results__cards">			<ResultCard				number={totalChars <= 9 ? `0${totalChars}` : totalChars} name={`Total Characters${excludeSpaces ? " (no space)" : ""}`}				className="total-characters"			/>			<ResultCard number={words <= 9 ? `0${words}` : words} name="Word Count" className="word-count"/>			<ResultCard				number={sentences <= 9 ? `0${sentences}` : sentences} name="Sentence Count" className="sentence-count"			/>		</section>	);}function ResultCard({number, name, className}) {	return (		<div className={`result-card ${className}`}>			<p className="result-card__number text-1">{number}</p>			<p className="result-card__name text-3">{name}</p>		</div>	)}function calculateStats(input) {	if (!input) {		return [0, 0, 0];	}	const clearedInput = input.trim();	const words = clearedInput.split(" ").length;	const sentences = clearedInput.split(/[.?!]/g).filter(Boolean).length;	return [words, sentences];}export function ResultStats({inputVal}) {	const [isSeeMoreOpen, setIsSeeMoreOpen] = useState(false);	const filteredLetters = Array.from(inputVal.toUpperCase()).filter(currChar => /[A-Z]/.test(currChar));	const lettersMap = calculateLetterDensity(filteredLetters);	function handleSeeMore() {		setIsSeeMoreOpen(isSeeMoreOpen => !isSeeMoreOpen);	}	return (		<section className="results__stats">			<h2 className="text-2">Letter Density</h2>			{filteredLetters <= 0 ?				<p className="text-4">No characters found. Start typing to see letter density</p> :				<>					<StatsBox letters={filteredLetters} lettersMap={lettersMap} seeMore={isSeeMoreOpen}/>					{						lettersMap.length > 5 &&							<button onClick={handleSeeMore} className="text-3 result__stats-see-more-btn">								{isSeeMoreOpen ? 'See less ðŸ”º' : 'See more ðŸ”»'}							</button>					}				</>			}		</section>	);}function StatsBox({letters, lettersMap, seeMore}) {	const totalLetters = letters.length;	const StatItems = lettersMap.map(([letter, count]) => {		return <Stat letter={letter} total={count} grandTotal={totalLetters} key={letter}/>	});	return (		<div className="stats-box">			{				seeMore ? StatItems : StatItems.slice(0, 5)			}		</div>	);}function Stat({letter, total, grandTotal}) {	const percentage = (total / grandTotal * 100).toFixed(2);	const style = {		width: `${percentage}%`	}	return (		<div className="letter-stat">			<span className="text-4">{letter}</span>			<div className="letter-stat__percentage-bar">				<div style={style} className="letter-stat__percentage"></div>			</div>			<span className="text-4 letter-stat__number">{total + ` (${percentage}%)`}</span>		</div>	);}function calculateLetterDensity(input) {	if (!input) {		return [];	}	const charsMap = new Map();	for (const currChar of input) {		charsMap.set(currChar, (charsMap.get(currChar) ?? 0) + 1);	}	return [...charsMap.entries()].sort((a, b) => b[1] - a[1]);}